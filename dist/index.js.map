{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar getDtype = require( '@stdlib/ndarray-base-dtype' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\n\n\n// MAIN //\n\n/**\n* Fills an input ndarray with a specified value.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - scalar value\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* fill( x, 10.0 );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction fill( x, value ) {\n\tvar v;\n\n\t// Broadcast the fill value to an ndarray of same shape and data type as the input ndarray:\n\tv = broadcastScalar( value, getDtype( x ), getShape( x ), getOrder( x ) );\n\n\t// Assign the fill value to each element of the input ndarray:\n\tassign( [ v, x ] ); // TODO: consider replacing with ndarray/base/assign-scalar in order to avoid zero-dimensional ndarray creation and subsequent broadcasting\n}\n\n\n// EXPORTS //\n\nmodule.exports = fill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill an input ndarray with a specified value.\n*\n* @module @stdlib/ndarray-base-fill\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var fill = require( '@stdlib/ndarray-base-fill' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* fill( x, 10.0 );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,uCAAwC,EACnEC,EAAW,QAAS,4BAA6B,EACjDC,EAAW,QAAS,4BAA6B,EACjDC,EAAW,QAAS,4BAA6B,EACjDC,EAAS,QAAS,6BAA8B,EAgDpD,SAASC,EAAMC,EAAGC,EAAQ,CACzB,IAAIC,EAGJA,EAAIR,EAAiBO,EAAON,EAAUK,CAAE,EAAGJ,EAAUI,CAAE,EAAGH,EAAUG,CAAE,CAAE,EAGxEF,EAAQ,CAAEI,EAAGF,CAAE,CAAE,CAClB,CAKAP,EAAO,QAAUM,IC5BjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "broadcastScalar", "getDtype", "getShape", "getOrder", "assign", "fill", "x", "value", "v", "main"]
}
