{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isScalarMostlySafeCompatible from '@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible'; // eslint-disable-line id-length\nimport broadcastScalar from '@stdlib/ndarray-base-broadcast-scalar';\nimport getDtype from '@stdlib/ndarray-base-dtype';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport assign from '@stdlib/ndarray-base-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Fills an input ndarray with a specified value.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {*} value - scalar value\n* @throws {TypeError} second argument cannot be safely cast to the input array data type\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n*\n* // Define the index offset:\n* var ox = 0;\n*\n* // Create the input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* fill( x, 10.0 );\n*\n* console.log( x.data );\n* // => <Float64Array>[ 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction fill( x, value ) {\n\tvar dt;\n\tvar v;\n\n\tdt = getDtype( x );\n\n\t// Safe casts are always allowed and allow same kind casts (i.e., downcasts) only when the output data type is floating-point...\n\tif ( !isScalarMostlySafeCompatible( value, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. The second argument cannot be safely cast to the input array data type. Data type: %s. Value: `%s`.', dt, value ) );\n\t}\n\t// Broadcast the fill value to an ndarray of same shape and data type as the input ndarray:\n\tv = broadcastScalar( value, dt, getShape( x ), getOrder( x ) );\n\n\t// Assign the fill value to each element of the input ndarray:\n\tassign( [ v, x ] ); // TODO: consider replacing with ndarray/base/assign-scalar in order to avoid zero-dimensional ndarray creation and subsequent broadcasting\n}\n\n\n// EXPORTS //\n\nexport default fill;\n"],"names":["fill","x","value","dt","v","getDtype","isScalarMostlySafeCompatible","TypeError","format","broadcastScalar","getShape","getOrder","assign"],"mappings":";;srBA6EA,SAASA,EAAMC,EAAGC,GACjB,IAAIC,EACAC,EAKJ,GAHAD,EAAKE,EAAUJ,IAGTK,EAA8BJ,EAAOC,GAC1C,MAAM,IAAII,UAAWC,EAAQ,wHAAyHL,EAAID,IAG3JE,EAAIK,EAAiBP,EAAOC,EAAIO,EAAUT,GAAKU,EAAUV,IAGzDW,EAAQ,CAAER,EAAGH,GACd"}